{
  "hash": "b5ddfeb3d63e16f6869c4ab08f155ee4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cleaning\"\nauthor:\n  - name: Swarnendu Moitra\n    attributes:\n        corresponding: true\n    affiliations:\n      - id: qmul\n        name: Queen Mary University of London\n        city: London\nformat: \n  html:\n    self-contained: true\n    anchor-sections: true\n    code-fold: true\n    toc: true\n    number-sections : true\n#  pdf\neditor: visual\nexecute: \n  echo: false\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(lme4)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(lmerTest)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'lmerTest'\n\nThe following object is masked from 'package:lme4':\n\n    lmer\n\nThe following object is masked from 'package:stats':\n\n    step\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(plotrix)\nsource('data/custom-theme.R')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n## Custom function\nclean_fn <- function(var1){\n  var1 <- var1 %>%\n    select(\"Participant Private ID\",\n           \"Zone Type\",\n           \"Reaction Time\",\n           \"Response\",\n           \"Correct\",\n           \"display\",\n           \"Condition\",\n           \"Item number\",\n           \"yesButton\") %>%\n    rename(Participant = `Participant Private ID`,\n           RT = 'Reaction Time',\n           Accuracy = Correct,\n           Response.Type = `Zone Type`,\n           Item.no = `Item number`,\n           Condition = Condition,\n           Trial.Type = display,\n           ACC = Correct,\n           ) %>% \n    filter(Response.Type==\"response_keyboard_single\", Trial.Type ==\"Trial\") %>%\n    select(!c(Response,Response.Type,Trial.Type))\n  \n  return(var1)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n# Load the raw dataset\n\n# Import CSV files - Left and Right - PROLIFIC\nPro_dataL = read_csv(file = \"data/raw/Pro_L.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 44559 Columns: 63\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (29): Event Index, UTC Date and Time, Local Date and Time, Tree Node Key...\ndbl (22): UTC Timestamp, Local Timestamp, Local Timezone, Experiment ID, Exp...\nlgl (12): Repeat Key, Participant Starting Group, Participant Completion Cod...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nPro_dataL$yesButton<-\"left\"\nPro_dataR = read_csv(file = \"data/raw/Pro_R.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 40767 Columns: 63\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (29): Event Index, UTC Date and Time, Local Date and Time, Tree Node Key...\ndbl (22): UTC Timestamp, Local Timestamp, Local Timezone, Experiment ID, Exp...\nlgl (12): Repeat Key, Participant Starting Group, Participant Completion Cod...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nPro_dataR$yesButton<-\"right\"\n\n# Import CSV files - Left and Right - mTurk\nmTurk_dataL = read_csv(file = \"data/raw/mTurk_L.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 12326 Columns: 63\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (32): Event Index, UTC Date, Local Date, Tree Node Key, Participant Publ...\ndbl (22): UTC Timestamp, Local Timestamp, Local Timezone, Experiment ID, Exp...\nlgl  (9): Repeat Key, Participant Starting Group, Participant External Sessi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nmTurk_dataL$yesButton<-\"left\"\nmTurk_dataR = read_csv(file = \"data/raw/mTurk_R.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 10429 Columns: 63\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (32): Event Index, UTC Date, Local Date, Tree Node Key, Participant Publ...\ndbl (22): UTC Timestamp, Local Timestamp, Local Timezone, Experiment ID, Exp...\nlgl  (9): Repeat Key, Participant Starting Group, Participant External Sessi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nmTurk_dataR$yesButton<-\"right\"\n\nPRO_L <- clean_fn(Pro_dataL)\nPRO_R <- clean_fn(Pro_dataR)\nProlific<- rbind(PRO_L,PRO_R)\nProlific$Source<-\"Prolific\"\nmTurk_L <- clean_fn(mTurk_dataL)\nmTurk_R <- clean_fn(mTurk_dataR)\nmTurk<- rbind(mTurk_L,mTurk_R)\nmTurk$Source<-\"mTurk\"\n\ndata <- rbind(Prolific,mTurk)\n#data <- data %>% select(!c(Response,Response.Type,Trial.Type))\nitems = read_csv(\"data/items-prefix-only.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 304 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Prefix\ndbl (1): Item.no\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nitems <- items %>%  \n  mutate(Item.no = as.numeric(Item.no))\n\ndata <- data %>%  \n  mutate(Item.no = as.numeric(Item.no))\n\ndata <- data %>% inner_join(items, by=c(\"Item.no\"))\n\nwrite_csv(data, \"data/data.csv\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}